<?xml version="1.0"?>
<!--
  ~ Copyright (c) 2008-2011 Ivan Khalopik.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

  <!--Checks that each Java package has a Javadoc file used for commenting. -->
  <module name="JavadocPackage">
    <property name="severity" value="warning"/>
  </module>

  <!--Checks the header of a source file against a header that contains a regular expression.-->
  <!--<module name="RegexpHeader">-->
  <!--<property name="headerFile" value="${checkstyle.header.file}"/>-->
  <!--</module>-->

  <!-- Checks for long source files. (2000 lines max)-->
  <module name="FileLength"/>
  <!-- Ensures the correct translation of code by checking property files for consistency regarding their keys. -->
  <module name="Translation"/>

  <module name="TreeWalker">
    <property name="cacheFile" value="${checkstyle.cache.file}"/>
    <property name="tabWidth" value="4"/>

    <!-- Checks for Javadoc comments.                     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html -->

    <!-- Checks Javadoc comments for class and interface definitions. todo: add authorFormat pattern -->
    <module name="JavadocType">
      <property name="severity" value="warning"/>
    </module>

    <!-- Checks the Javadoc of a method or constructor. -->
    <module name="JavadocMethod">
      <property name="severity" value="warning"/>
      <property name="allowUndeclaredRTE" value="true"/>
    </module>

    <!-- Checks that variables have Javadoc comments. -->
    <module name="JavadocVariable">
      <property name="severity" value="warning"/>
      <property name="scope" value="protected"/>
    </module>

    <!-- Checks for imports                              -->
    <!-- See http://checkstyle.sf.net/config_import.html -->

    <!-- Check that finds import statements that use the * notation. -->
    <module name="AvoidStarImport"/>

    <!-- Checks that there are no static import statements. -->
    <module name="AvoidStaticImport"/>

    <!-- Checks for imports from a set of illegal packages. (sun.*) -->
    <module name="IllegalImport"/>

    <!-- Checks for unused import statements. -->
    <module name="UnusedImports"/>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->

    <!--Checks for long lines.-->
    <module name="LineLength">
      <property name="max" value="125"/>
      <property name="ignorePattern" value="@version|@see|@todo|TODO"/>
    </module>

    <!-- Checks for long methods and constructors. (150 max) -->
    <module name="MethodLength"/>

    <!-- Checks the number of parameters of a method or constructor. (7 max) -->
    <module name="ParameterNumber"/>

    <!-- Checks the number of methods declared in each type. -->
    <!--<module name="MethodCount">-->
    <!--<property name="maxTotal" value="30"/>-->
    <!--</module>-->

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->

    <!-- Checks that the whitespace around the Generic tokens < and > is correct to the typical convention. -->
    <module name="GenericWhitespace"/>

    <!-- Checks the policy on how to wrap lines on operators. (end of line) -->
    <module name="OperatorWrap">
      <property name="option" value="eol"/>
    </module>

    <!-- Checks the policy on the padding of parentheses. -->
    <!-- Whether a space is forbidden after a left parenthesis and before a right parenthesis. -->
    <module name="ParenPad"/>

    <!-- Checks that a token is followed by whitespace.( , ; () ) -->
    <module name="WhitespaceAfter"/>

    <!-- Checks that a token is surrounded by whitespace. Empty constructor and method bodies (blocks) of the form -->
    <module name="WhitespaceAround"/>

    <!-- Checks for blocks. You know, those {}'s         -->
    <!-- See http://checkstyle.sf.net/config_blocks.html -->

    <!-- Checks the placement of left curly braces on types, methods and other blocks -->
    <module name="LeftCurly"/>

    <!-- Checks the placement of right curly braces. -->
    <module name="RightCurly"/>

    <!-- Checks for empty blocks. -->
    <module name="EmptyBlock">
      <property name="option" value="text"/>
    </module>

    <!-- Checks for braces around code blocks. -->
    <module name="NeedBraces"/>

    <!-- Finds nested blocks, i.e. blocks that are used freely in the code. -->
    <module name="AvoidNestedBlocks"/>

    <!-- Checks for Naming Conventions.                  -->
    <!-- See http://checkstyle.sf.net/config_naming.html -->

    <!-- ^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$ -->
    <module name="PackageName"/>

    <!-- ^[A-Z][a-zA-Z0-9]*$ -->
    <module name="TypeName"/>

    <!-- ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$ -->
    <module name="ConstantName"/>

    <!-- ^[a-z][a-zA-Z0-9]*$ -->
    <module name="StaticVariableName"/>

    <!-- ^[a-z][a-zA-Z0-9]*$ -->
    <module name="MemberName"/>

    <!-- ^[a-z][a-zA-Z0-9]*$ -->
    <module name="MethodName"/>

    <!-- ^[a-z][a-zA-Z0-9]*$ -->
    <module name="ParameterName"/>

    <!-- ^[a-z][a-zA-Z0-9]*$ -->
    <module name="LocalFinalVariableName"/>

    <!-- ^[a-z][a-zA-Z0-9]*$ -->
    <module name="LocalVariableName"/>

    <!-- ^[A-Z]$ -->
    <module name="ClassTypeParameterName"/>

    <!-- ^[A-Z]$ -->
    <module name="MethodTypeParameterName"/>

    <!-- Modifier Checks                                    -->
    <!-- See http://checkstyle.sf.net/config_modifiers.html -->

    <!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification -->
    <module name="ModifierOrder"/>

    <!-- Checks for redundant modifiers in interface and annotation definitions. -->
    <module name="RedundantModifier"/>

    <!-- Checks for class design                         -->
    <!-- See http://checkstyle.sf.net/config_design.html -->

    <!-- Checks visibility of class members. Only static final members may be public. -->
    <module name="VisibilityModifier"/>

    <!-- Ensures that exceptions have only final fields. -->
    <module name="MutableException"/>

    <!-- Checks fo annotations.                              -->
    <!-- See http://checkstyle.sf.net/config_annotation.html -->

    <!-- Verifies that both the Deprecated annotation and the @deprecated Javadoc tag is present. -->
    <module name="MissingDeprecated"/>

    <!-- Verifies that the Override annotation is present when the {@inheritDoc} javadoc tag is present. -->
    <module name="MissingOverride">
      <property name="javaFiveCompatibility" value="true"/>
    </module>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->

    <!-- A check for TODO: comments. -->
    <module name="TodoComment"/>

    <!-- Checks for uncommented main() methods (debugging leftovers). -->
    <module name="UncommentedMain"/>

    <!-- Check that method/constructor/catch block parameters are final. -->
    <module name="FinalParameters"/>

    <!-- Checks correct indentation of Java Code. todo: continuation indent can not be configured -->
    <module name="Indentation"/>

    <!-- Checks that long constants are defined with an upper ell. -->
    <module name="UpperEll"/>

    <!-- Checks for common coding problems               -->
    <!-- See http://checkstyle.sf.net/config_coding.html -->

    <!-- Checks that array initialization contains a trailing comma. -->
    <module name="ArrayTrailingComma"/>

    <!-- Detects empty statements (standalone ;). -->
    <module name="EmptyStatement"/>

    <!-- Checks that classes that override equals() also override hashCode(). -->
    <module name="EqualsHashCode"/>

    <!-- Checks that local variables that never have their values changed are declared final. -->
    <module name="FinalLocalVariable"/>

    <!-- Checks that a local variable or a parameter does not shadow a field that is defined in the same class. -->
    <module name="HiddenField">
      <property name="severity" value="warning"/>
      <property name="ignoreSetter" value="true"/>
      <property name="ignoreConstructorParameter" value="true"/>
    </module>

    <!-- Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);. -->
    <module name="InnerAssignment"/>

    <!-- Checks that there are no "magic numbers", where a magic number is a numeric literal that is not defined as a constant. -->
    <module name="MagicNumber">
      <!-- some numbers are really not that magic -->
      <property name="ignoreNumbers"
                value="-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 32, 64, 100, 128, 256, 512, 1000, 1024"/>
    </module>

    <!-- Checks for redundant exceptions declared in throws clause such as duplicates, unchecked exceptions or subclasses of another declared exception. -->
    <module name="RedundantThrows"/>

    <!-- Checks for overly complicated boolean expressions. Currently finds code like if (b == true), b || true, !false, etc -->
    <module name="SimplifyBooleanExpression"/>

    <!-- Checks for overly complicated boolean return statements. -->
    <module name="SimplifyBooleanReturn"/>

    <!-- Checks that the clone method is not overridden from the Object class. -->
    <module name="NoClone"/>
    <!-- Verifies there are no finalize() methods defined in a class. -->
    <module name="NoFinalizer"/>

    <module name="DeclarationOrder"/>

    <!-- Disallow assignment of parameters. -->
    <module name="ParameterAssignment"/>

    <!-- Checks for multiple occurrences of the same string literal within a single file. -->
    <module name="MultipleStringLiterals"/>

    <!-- Checks there is only one statement per line. -->
    <!--<module name="OneStatementPerLine"/>-->
  </module>

</module>
