 ----
 GreatAge Common Utilities
 ----

Introduction

  GreatAge Common module provides a set of utilities that helps to simplify work with java core classes and classes
  from other java-based frameworks like hibernate, javassist, etc. They doesn't provide any architecture, only base,
  most-needed methods. All utilities are divided to:

  * {{{Common_utilities}Common utilities}}

    * {{{Collection_utilities}Collection utilities}}

    * {{{String_utilities}String utilities}}

    * {{{Encode_utilities}Encode utilities}}

    * {{{Internationalization_utilities}Internationalization utilities}}

    * {{{Reflection_utilities}Reflection utilities}}

    * {{{Ordering_utilities}Ordering utilities}}

    * {{{Other_helpers}Other helpers}}

  * {{{Javassist_utilities}Javassist utilities}}

  * {{{Hibernate_utilities}Hibernate utilities}}

  []

{Common utilities}

  This utilities provides classes that simplifies work with core java APIs.

* {Collection utilities}

  They are represented by abstract class CollectionUtils. This utility can be used for collection creation with already
  defined elements. It supports creation of set, list, map and their concurrent variants For example, creation of
  concurrent set can look like:

+----+
final Set<String> names = CollectionUtils.newConcurrentSet("Name1", "Name2", "Name3", "Name4");
+----+

  Creation of map is more complex as it consists of two different collections, keys and values. So it
  creation may look like:

+----+
final Map<String, Integer> variables = CollectionUtils.newMap("var1", 1, "var2", 2, "var3", 3);
+----+

  Below is a table that describes what collection type is created by certain utility method:

*-------------------------*-------------------------------------------*
|| Method                 || Implementation class                     |
*-------------------------*-------------------------------------------*
| newSet(...)             | java.util.HashSet                         |
*-------------------------*-------------------------------------------*
| newConcurrentSet(...)   | java.util.concurrent.CopyOnWriteArraySet  |
*-------------------------*-------------------------------------------*
| newList(...)            | java.util.ArrayList                       |
*-------------------------*-------------------------------------------*
| newConcurrentList(...)  | java.util.concurrent.CopyOnWriteArrayList |
*-------------------------*-------------------------------------------*
| newMap(...)             | java.util.HashMap                         |
*-------------------------*-------------------------------------------*
| newConcurrentMap(...)   | java.util.concurrent.ConcurrentHashMap    |
*-------------------------*-------------------------------------------*

  Also this utility can be used for checking if collection is empty:

+----+
final Set<String> names = CollectionUtils.newConcurrentSet("Name1", "Name2", "Name3", "Name4");
// do some staff
if (CollectionUtils.isEmpty(names)) {
  // do some staff
}
+----+

* {String utilities}

  They are represented by abstract class StringUtils. This utility can be used for working with strings. For example,
  to check if string is empty we can do:

+----+
if (StringUtils.isEmpty(text)) {
  // do dome staff
}
+----+

  To convert binary data represented as byte array to string representation in hex form we can use:

+----+
final byte[] data = calculateData();
final String hexData = StringUtils.toHexString(data);
System.out.println("Calculated data: " + hexData);
+----+

* {Encode utilities}

  They are represented by abstract class EncodeUtils. This utilities provides encode functionality to encode/decode
  binary data with some algorithms (e.g. MD5, SHA1, BASE64).

  For example, calculating hash sum using MD5 algorithm will look like:

+----+
final byte[] data = calculateData();
final byte[] md5sum = EncodeUtils.encode(data, "MD5");
+----+

  It can be very useful for keeping user passwords in DB like hash sums. In such situation it is a good idea to use it
  with <StringUtils.toHexString()> or <EncodeUtils.encodeBase64()>:

+----+
public String encodePassword(final String password, final boolean useBase64) {
  if (password == null) {
    return null;
  }
  final byte[] bytes = EncodeUtils.encode(password.getBytes(), algorithm);
  return useBase64 ? new String(EncodeUtils.encodeBase64(bytes)) : StringUtils.toHexString(bytes);
}
+----+

* {Internationalization utilities}

  They are represented by abstract class I18nUtils. This utility provides functionality for working with locales. It can
  convert strings to locales and also can create list of candidate locales for certain locale.

  To parse locale from string just type:

+----+
final Locale locale = I18nUtils.getLocale("ru_RU");
+----+

  Sometimes it is necessary in project to use resources in some other similar to original locale when resources in original
  are missing. In that case this code will be useful:

+----+
final List<Locale> locales = I18nUtils.getCandidateLocales(resourceLocale);
for (Locale candidate : locales) {
  // do some staff
}
+----+

* {Reflection utilities}

  They are represented by abstract class ReflectionUtils. This utility makes using java reflection easier. It provides
  methods for finding constructors by parameter types, extracting exceptions from throwable cause, creating new object
  instances by class and constructor parameters, getting wrapper type for primitives.

  Creation of new instance of SimpleDateFormat will look like:

+----+
final SimpleDateFormat format =
  ReflectionUtils.newInstance(SimpleDateFormat.class, "yyyy-MM-dd", Locale.ENGLISH);
+----+

  To find all correspondent constructors for specified class we can use:

+----+
final List<Constructor<SimpleDateFormat>> constructors =
  ReflectionUtils.findConstructors(SimpleDateFormat.class, String.class);
+----+

  If we need to extract some exception from some other exception cause we can use such code:

+----+
try {
  // do some staff
} catch (RuntimeException exception) {
  final SecurityException se = ReflectionUtils.findException(exception, SecurityException.class);
  if (se != null) {
    throw se;
  }
}
+----+

* {Ordering utilities}
  
  They are represented by abstract class OrderingUtils. This utility makes possibility to sort items that implements 
  Ordered interface. Such items has identifier and sort constraints like after:id1 or before:id2. 
  
  For example we have items:

----  
id2: before:id3,after:id1
id4: -
id5: after:id4
id3: before:id5,after:id1
id1: -
----

  First rule says that id2 item are placed between id1 and id3. Third rule says that id5 are placed after id4. Fourth
  rule says that id3 are placed between id1 and id5. If there are no constraints for items they will be placed according 
  to adding order. All this rules together sets up such items order: id1, id2, id3, id4, id5. Following code demonstrates
  using of OrderingUtils:

+----+
final List<Ordered> unsorted = calculateItems();
final List<Ordered> sorted = OrderingUtils.order(unsorted);
+----+  
  
* {Other helpers}

  Locker can be used for locking access to some code at runtime to prevent use it again. It most useful with builder
  pattern when build method locks instance:

+----+
public class FooterBuilder {
  private final Locker locker = new Locker();
  private Date date;
  private String title;

  public FooterBuilder setDate(final Date date) {
    locker.check();
    this.date = date;
    return this;
  }

  public FooterBuilder setTitle(final String title) {
    locker.check();
    this.title = title;
    return this;
  }

  public String build() {
    locker.lock();
    return "["+ date + "] " + title;
  }
}
+----+

  It has two methods:
  * check - checks locker and throws exception if already locked
  * lock - locks locker and throws exception if already locked

  MultiLocker are the same as Locker with only difference that it locks code by key. It makes possible to have different
  triggers for code locking:

+----+
public class ArticleBuilder {
  private final MultiLocker<String> locker = new MultiLocker<String>();

  private Date date;
  private String title;
  private String author;

  public ArticleBuilder setDate(final Date date) {
    locker.check("header");
    locker.check("footer");
    this.date = date;
    return this;
  }

  public ArticleBuilder setTitle(final String title) {
    locker.check("header");
    locker.check("footer");
    this.title = title;
    return this;
  }

  public ArticleBuilder setAuthor(final String author) {
    locker.check("footer");
    this.author = author;
    return this;
  }

  public String buildHeader() {
    locker.lock("header");
    return title + " - " + date;
  }

  public String buildFooter() {
    locker.lock("footer");
    return "[" + date + "] " + title + " - " + author;
  }
}
+----+

  CompositeKey represents utility that unites multiply keys in one instance. It is useful as alternative to nested maps
  when values needs to be mapped by multiply keys:

+----+
public class ArticleRepository {
  private final Map<CompositeKey, String> articles = new HashMap<CompositeKey, String>();

  public void addArticle(final String author, final String title, final String article) {
    final CompositeKey key = new CompositeKey(author, title);
    articles.put(key, article);
  }

  public String getArticle(final String author, final String title) {
    final CompositeKey key = new CompositeKey(author, title);
    return articles.get(key);
  }
}
+----+

{Javassist utilities}

{Hibernate utilities}
